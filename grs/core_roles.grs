%test the new lexicon structure
rule pred_nsubj_new_lex(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		V[cat=VERB, lemma=lex.lemma, arg0=agent|actor|cause|stimulus|actor1];
		nsubj_rel: V -[nsubj]-> NSUBJ;
	}
	commands {
		del_edge nsubj_rel;
		add_edge V -[ARG0]-> NSUBJ;
		NSUBJ.concept = NSUBJ.form;
	}
}

rule prepare_verb_arg(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		V[cat=VERB, concept=lex.concept];
	}
	without {
		V[arg0];
	}
	commands {
		V.arg0 = lex.arg0;
		V.arg1 = lex.arg1;
		V.arg2 = lex.arg2;
		V.arg3 = lex.arg3;
		V.arg4 = lex.arg4;
		V.arg5 = lex.arg5;
		V.arg6 = lex.arg6;
		V.arg7 = lex.arg7;
		V.arg8 = lex.arg8;
		V.arg9 = lex.arg9;
	}
}

rule prepare_concept(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		V[cat=VERB, !arg0, !arg1, !arg2, !arg3, !arg4, !arg5, !arg6, !arg7, !arg8, !arg9, lemma=lex.lemma];
	}
	without {
		V[concept=lex.concept];
	}
	commands {
		V.concept = lex.concept;
	}
}

% The predicate has a subject and an object
rule pred_nsubj_obj(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		V[cat=VERB, lemma=lex.lemma, arg0=agent|actor|stimulus|cause|actor1, arg1=patient|theme|experiencer|patient1];
		nsubj_rel: V -[nsubj]-> NSUBJ;
		obj_rel: V -[obj]-> OBJ;
	}
	commands {
		del_edge nsubj_rel;
		del_edge obj_rel;
		add_edge V -[ARG0]-> NSUBJ;
		add_edge V -[ARG1]-> OBJ;
	}
}

% The predicate has an object
rule pred_obj_arg1(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		V[cat=VERB, lemma=lex.lemma, arg1=patient|theme|experiencer|patient1];
		obj_rel: V -[obj]-> OBJ;
	}
	commands {
		del_edge obj_rel;
		add_edge V -[ARG1]-> OBJ;
		OBJ.concept = OBJ.form;
	}
}

% The predicate has an object
rule pred_obj_arg2(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		V[cat=VERB, lemma=lex.lemma, arg2=patient|theme|experiencer|patient1];
		obj_rel: V -[obj]-> OBJ;
	}
	commands {
		del_edge obj_rel;
		add_edge V -[ARG2]-> OBJ;
		OBJ.concept = OBJ.form;
	}
}

% Noun which has an amod and has not been changed by noun_amod_arg_of
rule noun_amod{
	pattern{
		N[cat=NOUN];
		amod_rel: N -[amod]-> A;
	}
	commands{
		del_edge amod_rel;
		add_edge N -[mod]-> A;
	}
}

%subj, obj and iobj present
rule pred_nsubj_obj_iobj(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern{
		GOV[lemma=lex.lemma, arg0=agent, arg1=patient|patient1, arg2=recipient];
		nsubj_rel: GOV -[nsubj]-> NSUBJ;
		obj_rel: GOV -[obj]-> OBJ;
		iobj_rel: GOV -[iobj]-> IOBJ;
	}
	commands{
		del_edge nsubj_rel; del_edge obj_rel; del_edge iobj_rel;
		add_edge GOV -[ARG0]-> NSUBJ;
		add_edge GOV -[ARG1]-> OBJ;
		add_edge GOV -[ARG2]-> IOBJ;
	}
}

% A clausal complement of a verb/adverb (i.e. predicate) that is not a copula construction. 
rule ccomp_verbadv_notcop(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern{
		GOV[lemma=lex.lemma, upos=VERB|ADV, arg1=theme|topic, arg0=agent|actor|actor1|cause|actor1];
		ccomp_rel: GOV -[ccomp]-> DEP;
		nsubj_rel: GOV -[nsubj]-> NSUBJ;
	}
	without{
		GOV[lemma="be"];
		} %exclude all copula constructions
	commands{
		del_edge ccomp_rel;
		del_edge nsubj_rel;
		add_edge GOV -[ARG1]-> DEP;
		add_edge GOV -[ARG0]-> NSUBJ;
	}
}


% Remove DET tags with a lemma "a", "an" or "the"
rule remove_det{
	pattern{
		D[cat=DET, lemma="the"|"a"|"an"];
		det_rel: X -[det]-> D;
	}
	commands{
		del_node D;
	}
}

%If DET's lemma is "all" or "some", make it a :mod
rule det_as_all{
	pattern{
		D[cat=DET, lemma="all"|"some"];
		det_rel: X -[det]-> D;
	}
	commands{
		del_edge det_rel;
		add_edge X -[mod]-> D;
	}
}

% If DET is a personal pronoun, transform that to :poss
% Possesive determiners are given the tag DEP, butthe relation nmod. However, we need
% to account for the cases where they are given the relation dep too because
% this may happen often across the data.
rule det_as_pers_pron{
	pattern{
		D[cat=DET, upos=PRON];
		det_rel: X -[det]-> D;
	}
	without{
		D[lemma="which"];
	}
	commands{
		del_edge det_rel;
		add_edge X -[poss]-> D;
	}
}

rule remove_punct{
	pattern{
		P[cat=PUNCT];
	}
	commands{
		del_node P;
	}
}

rule remove_root_rel{
	pattern{
		root_rel: X -[root]-> Y;
	}
	commands{
		del_node X;
	}
}

% Transform nmod or nmod:poss relation to a poss relation
rule nmod{
	pattern{
		nmod_rel: GOV -[nmod|nmod:poss]-> DEP;
	}
	commands{
		del_edge nmod_rel;
		add_edge GOV -[poss]-> DEP;
	}
}

%If a node has more than one cc grandchildren with the same lemma (all "and" or all "or"), remove one. This rule is meant to be applied a few times until only one cc is left. After that, the cc_to_op_morethan2 and cc_to_op rules should be applied
rule remove_extra_cc_grandchildren {
	pattern {
		first_conj: GRANDPA -[conj]-> FIRST_CHILD;
		first_cc: FIRST_CHILD -[cc]-> FIRST_GRANDKID;
		second_conj: GRANDPA -[conj]-> SECOND_CHILD;
		second_cc: SECOND_CHILD -[cc]-> SECOND_GRANDKID;
	}
	commands {
		del_node SECOND_GRANDKID;
	}
}

% If there are more than members in a conjunction, add an :op relation to the middle ones
% This rule needs to be applied once for each middle element
rule cc_to_op_morethan2{
	pattern{
		FIRST -[cc]-> AND;
		LAST -[conj]-> FIRST;
		conj_rel: LAST -[conj]-> MID;
	}
	commands{
		del_edge conj_rel;
		add_edge AND -[op]-> MID;
	}
}

rule add_root_concept{
	pattern{
		R -[root]-> DEP;
	}
	commands{
		R.concept = "root";
	}
}

%Add a concept to each word
rule add_concept{
	pattern{
		N [lemma];
	}
	without{
		N [concept];
	}
	commands{
		N.concept = N.lemma;
	}
}

%when we have a passive subject, e.g. "the cat was chased"
rule pred_nsubjpass(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		GOV[lemma=lex.lemma, arg1=patient|theme|patient1];
		nsubjpass_rel: GOV -[nsubj:pass]-> NSUBJPASS;
	}
	commands {
		del_edge nsubjpass_rel;
		add_edge GOV -[ARG1]-> NSUBJPASS;
	}
}

%when we have a passive subject and an object or obl:agent, e.g. "the cat was chased by the dog"
rule pred_nsubjpass_obj(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		GOV[lemma=lex.lemma, arg0=agent|actor|cause|stimulus|actor1, arg1=patient|theme|patient1];
		nsubjpass_rel: GOV -[nsubj:pass]-> NSUBJPASS;
		obj_or_obl_rel: GOV -[obj|obl:agent]-> OBJ
	}
	commands {
		del_edge nsubjpass_rel;
		add_edge GOV -[ARG0]-> OBJ;
		add_edge GOV -[ARG1]-> NSUBJPASS;
	}
}

%remove aux:pass relation when the predicate has an nsubj:pass relation too
rule remove_aux_pass {
	pattern {
		aux_pass_rel: GOV -[aux:pass]-> DEP;
		nsubj_pass_rel: GOV -[nsubj:pass]-> DEP2;
	}
	commands {
		del_node DEP;
	}
}

%find a GOV which has an nsubj and an ccomp and transform the ccomp to the corresponding ARG for theme of the predicate
rule pred_nsubj_obj_ccomp_arg0_arg1_arg2(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		GOV [lemma=lex.lemma, arg0=agent|actor|cause|stimulus|actor1, arg1=patient|patient1, arg2=theme];
		nsubj_rel: GOV -[nsubj]-> NSUBJ;
		ccomp_rel: GOV -[ccomp]-> CCOMP;
		obj_rel: GOV -[obj]-> OBJ;
	}
	commands {
		del_edge nsubj_rel;
		del_edge ccomp_rel;
		del_edge obj_rel;
		add_edge GOV -[ARG0]-> NSUBJ;
		add_edge GOV -[ARG1]-> OBJ;
		add_edge GOV -[ARG2]-> CCOMP;
	}
}

%find a GOV which has an nsubj and an ccomp and transform the ccomp to the corresponding ARG for theme of the predicate
rule pred_nsubj_ccomp_arg0_arg1(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		GOV [lemma=lex.lemma, arg0=agent|actor|cause|stimulus|actor1, arg1=theme];
		nsubj_rel: GOV -[nsubj]-> NSUBJ;
		ccomp_rel: GOV -[ccomp]-> CCOMP;
	}
	commands {
		del_edge nsubj_rel;
		del_edge ccomp_rel;
		add_edge GOV -[ARG0]-> NSUBJ;
		add_edge GOV -[ARG1]-> CCOMP;
	}
}

%find a GOV which has an nsubj and an ccomp and transform the ccomp to the corresponding ARG for theme of the predicate
rule pred_nsubj_ccomp_arg0_arg2(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		GOV [lemma=lex.lemma, arg0=agent|actor|cause|stimulus|actor1, arg1=theme];
		nsubj_rel: GOV -[nsubj]-> NSUBJ;
		ccomp_rel: GOV -[ccomp]-> CCOMP;
	}
	commands {
		del_edge nsubj_rel;
		del_edge ccomp_rel;
		add_edge GOV -[ARG0]-> NSUBJ;
		add_edge GOV -[ARG1]-> CCOMP;
	}
}

%remove cop relations - should be done at the end of the rules as a part of the cleanup; reason: cop relations don't bring in any semantic information
rule remove_cop {
	pattern {
		cop_rel: GOV -[cop]-> DEP;
	}
	commands {
		del_node DEP;
	}
}

%remove case relations - should be done at the end of the rules as a part of the cleanup; reason: case relations don't bring in any semantic information
rule remove_case {
	pattern {
		case_rel: GOV -[case]-> DEP;
	}
	commands {
		del_node DEP;
	}
}

%transform advmod with a lemma "not" or "never" to polarity with a lemma "-"
rule advmod_as_not_to_polarity {
	pattern {
		advmod_rel: GOV -[advmod]-> DEP;
		DEP [lemma="not"|"never"];
	}
	commands {
		del_edge advmod_rel;
		add_edge GOV -[polarity]-> DEP;
		DEP.concept="-"
	}
}

%case|mark with a lemma "without" becomes polarity with a concept "-"
rule without_to_polarity {
	pattern {
		rel: GOV -[case|mark]-> DEP;
		DEP [lemma="without"];
	}
	commands{
		del_edge rel;
		add_edge GOV -[polarity]-> DEP;
		DEP.concept="-";
	}
}

%predicate with an nsubj, an obj or ccomp (without lemma "be") and an obl, which has a case ("they gave the toys to the children")
rule pred_nsubj_obj_obl_case(lex from "lexicons/subcat/test_lexicon.lp"){
	pattern {
		GOV[lemma=lex.lemma, arg0=agent|actor|actor1|cause|stimulus, arg1=topic|theme, arg2=recipient|theme];
		nsubj_rel: GOV -[nsubj]-> NSUBJ;
		obj_rel: GOV -[obj|ccomp]-> OBJ;
		obl_rel: GOV -[obl]-> OBL;
		case_rel: OBL -[case]-> CASE;
	}
	without {
		GOV[lemma="be"];
	}
	commands {
		del_edge nsubj_rel;
		add_edge GOV -[ARG0]-> NSUBJ;
		del_edge obj_rel;
		add_edge GOV -[ARG1]-> OBJ;
		del_edge obl_rel;
		add_edge GOV -[ARG2]-> OBL;
		del_node CASE;
	}
}

%only one cc
rule only_one_cc {
	pattern {
		cc_rel: GOV -[cc]-> DEP;
	}
	commands {
		del_edge cc_rel;
		add_edge DEP -[op1]-> GOV;
	}
}