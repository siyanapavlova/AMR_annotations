% The predicate has a subject and an object
rule pred_nsubj_obj(lex from "lexicons/subcat/verb_nsubj_obj.lp"){
	pattern {
		V[cat=VERB,lemma=lex.lemma];
		nsubj_rel: V -[nsubj]-> NSUBJ;
		obj_rel: V -[obj]-> OBJ;
	}
	commands {
		del_edge nsubj_rel;
		del_edge obj_rel;
		add_edge V -[lex.doer]-> NSUBJ;
		add_edge V -[lex.patient]-> OBJ;
		V.concept = lex.concept;
		NSUBJ.concept = NSUBJ.form;
		OBJ.concept = OBJ.form;
	}
}

% The predicate has an object
rule pred_nsubj_obj(lex from "lexicons/subcat/verb_nsubj_obj.lp"){
	pattern {
		V[cat=VERB,lemma=lex.lemma];
		obj_rel: V -[obj]-> OBJ;
	}
	commands {
		del_edge obj_rel;
		add_edge V -[lex.patient]-> OBJ;
		V.concept = lex.concept;
		OBJ.concept = OBJ.form;
	}
}

% Noun which has an amod and has not been changed by noun_amod_arg_of
rule noun_amod{
	pattern{
		N[cat=NOUN];
		amod_rel: N -[amod]-> A;
	}
	commands{

	}
}

% Noun which has an amod and has not been changed by noun_amod_arg_of
rule noun_amod{
	pattern{
		N[cat=NOUN];
		amod_rel: N -[amod]-> A;
	}
	commands{
		del_edge amod_rel;
		add_edge N -[:mod]-> A;
		N.concept = N.form;
		A.concept = A.form
	}
}


% A clausal complement of a verb/adverb (i.e. predicate) that is not a copula construction. 
rule ccomp_verbadv_notcop(lex from "lexicons/subcat/verb_nsubj_obj.lp"){
	pattern{
		GOV[lemma=lex.lemma, upos=VERB|ADV];
		ccomp_rel: GOV -[ccomp]-> DEP;
	}
	without{GOV[lemma="be"]} %exclude all copula constructions
	commands{
		add_edge GOV -[lex.patient]-> DEP;
		del_edge ccomp_rel;
	}
}


%% K-to-complete | A clausal complement involving an equational copula construction. !to figure out how to assign have-degree-91 ARG0 to ARG6
%rule ccomp_copula_equational(lex from "lexicons/subcat/verb_nsubj_obj.lp"){
%	pattern{
%		pattern { GOV[lemma="be"];
%		GOV -[nsubj|obj|iobj]-> OTHERDEP;
%		GOV -[ccomp]-> DEP }
%	}
%	commands{
%		add_node X; X.concept = "have-degree-91";
%		add_edge GOV-[]->DEP;
%		del_edge ccomp_rel;
%
%	}
%}

%% K-to-double check | A clausal complement with a copula construction that is not equational. !to figure out how to assign have-degree-91 ARG0 to ARG6
%rule ccomp_copula_nonequational(lex from "lexicons/subcat/verb_nsubj_obj.lp"){
%	pattern{
%		pattern { GOV[lemma="be"];
%		DEP[lemma=lex.lemma];
%		ccomp_rel GOV -[ccomp]-> DEP }
%	}
%	commands{
%		add_edge DEP -[lex.doer]-> GOV;
%		del_edge ccomp_rel;
%
%	}
%}

% An iobj relation whose dependent is a nominal and whose governor is in the predicate lexicon. 
rule iobj_nom_lex(lex from "lexicons/subcat/verb_nsubj_obj.lp"){
    pattern{
		GOV [lemma = lex.lemma]
      	DEP [upos=NOUN|PROPN|PRON];
      	iobj_rel: GOV -[iobj]-> DEP;
	  }
    commands{ 
		add_edge GOV -[lex.patient]-> DEP;
		del_edge iobj_rel; 
	}
}

% An iobj relation whose dependent is a nominal and whose governor is in not the predicate lexicon. 
rule iobj_nom_notlex{
    pattern{
      	DEP [upos=NOUN|PROPN|PRON];
      	iobj_rel: GOV -[iobj]-> DEP;
	  }
    commands{ 
		add_edge GOV -[:beneficiary]-> DEP;
		del_edge iobj_rel; 
	}
}

%% K-to-complete | An iobj relation whose dependent is a not nominal and whose governor is/is not in the predicate lexicon. 
%% [This means that the dependent should be the head of another AMR subgraph...]
%rule iobj_notnom_notlex{
%    pattern{
%      	DEP [upos=NOUN|PROPN|PRON];
%      	iobj_rel: GOV -[iobj]-> DEP;
%	  }
%    commands{ 
%		add_edge GOV -[:beneficiary]-> DEP;
%		del_edge iobj_rel; 
%	}
%}

% Remove DET tags with a lemma "a", "an" or "the"
rule remove_det{
	pattern{
		D[cat=DET, lemma="the"|"a"|"an"];
		det_rel: X -[det]-> D;
	}
	commands{
		del_node D;
	}
}

%If DET's lemma is "all", make it a :mod
rule det_as_all{
	pattern{
		D[cat=DET, lemma="all"];
		det_rel: X -[det]-> D;
	}
	commands{
		del_edge det_rel;
		add_edge X -[:mod]-> D;
	}
}

% If DET is a personal pronoun, transform that to :poss
% Possesive determiners are given the tag DEP, butthe relation nmod. However, we need
% to account for the cases where they are given the relation dep too because
% this may happen often across the data.
rule det_as_pers_pron{
	pattern{
		D[cat=DET, upos=PRON];
		det_rel: X -[det]-> D;
	}
	without{
		D[lemma="which"];
	}
	commands{
		del_edge det_rel;
		add_edge X -[:poss]-> D;
	}
}

rule remove_punct{
	pattern{
		P[cat=PUNCT];
	}
	commands{
		del_node P;
	}
}

%rule remove_root_rel{
%	pattern{
%		root_rel: X -[root]-> Y;
%	}
%	commands{
%		del_edge root_rel;
%	}
%}


% Transform nmod or nmod:poss relation to a poss relation
rule nmod{
	pattern{
		nmod_rel: GOV -[nmod|nmod:poss]-> DEP;
	}
	commands{
		del_edge nmod_rel;
		add_edge GOV -[:poss]-> DEP;
	}

}

% If there are more than members in a conjunction, add an :op relation to the middle ones
% This rule needs to be applied once for each middle element
rule cc_to_op{
	pattern{
		LAST -[cc]-> AND;
		FIRST -[conj]-> LAST;
		conj_rel FIRST -[conj]-> MID;
	}
	commands{
		del_edge conj_rel;
		add_edge AND -[:op]-> MID;
	}
}

% If there are a cc and a conj relations but no middle relations (only two members in a conjuction)
% then transform both the first and last element in :op
rule cc_to_op{
	pattern{
		cc_rel: LAST -[cc]-> AND;
		conj_rel FIRST -[conj]-> LAST;
	}
	without{
		FIRST -[conj]-> MID;
	}
	commands{
		del_edge conj_rel;
		add_edge AND -[:op]-> FIRST;
		del_edge cc_rel;
		add_edge AND -[:op]-> LAST
	}
}