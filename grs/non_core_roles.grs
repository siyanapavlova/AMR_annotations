% The compound relationship does not have a subtag; find and join the governor and dependent of a compound relationship. There may be
% of a sequence of more than two words joined sequentially with the compound relationship, i.e. this rule is expected to be applied
% in an iter manner. 
rule compound_find_join{
	pattern  {
		compound_rel: Nominal1 -[compound]-> Nominal2;
	}
	commands {
		Nominal1.concept = Nominal2.form + Nominal1.form; 
		del_edge compound_rel
	}
}

% The compound relationship has a "part" subtag; find and join the governor and dependent of a compound relationship. There may be
% of a sequence of more than two words joined sequentially with the compound relationship, i.e. this rule is expected to be applied
% in an iter manner. 
rule compoundpart_find_join{
	pattern  {
		compound_rel: Nominal1 -[compound:part]-> Nominal2;
	}
	commands {
		Nominal1.concept = Nominal2.form + Nominal1.form; 
		del_edge compound_rel
	}
}

% A nummod follows a nominal that follows a verb with nsubj | e.g. "She bought two gallons of milk." or "He bought 10 pretty grams of gold!"
rule verb_nominal_nummod_nsubj(lex1 from "lexicons/subcat/verb_nominal_nummod.lp", lex2 from "lexicons/subcat/verb_nsubj_obj.lp"){
	pattern {
		V[upos=VERB, lemma=lex2.lemma];
		Nominal1[upos=NOUN, lemma=lex1.lemma]; 				% lexicon of quantity measure words
		Nominal2[upos=NOUN|PROPN];							% PROPN too, e.g. "ten Girl Guides"
		verb_nom_rel: V -[nsubj]-> Nominal1; 				% filter to only those with nsubj relations
		nmod_rel: Nominal1 -[nmod]-> Nominal2;
		nummod_rel: Nominal1 -[nummod]-> Num;
	}
	commands {
		add_node UNIT; UNIT.concept = lex1.quantitytype; 	% add a new node [x]-quantity 
		add_edge UNIT -[quant]-> Num; 
		add_edge UNIT -[unit]-> Nominal1;
		del_edge nmod_rel;
		del_edge nummod_rel;

		add_edge V -[lex2.patient]-> Nominal2; 				% AMR takes the quantified element as the concept; see entry on milk in https://github.com/amrisi/amr-guidelines/blob/master/amr.md#quantities (same as AMR1.2)
		V.patient = lex2.patient;
		del_edge verb_nom_rel;
	}
}

% A nummod follows a nominal that follows a verb with obj  | e.g. "Ten group of shareholders went to the meeting."
rule verb_nominal_nummod_obj(lex1 from "lexicons/subcat/verb_nominal_nummod.lp", lex2 from "lexicons/subcat/verb_nsubj_obj.lp"){
	pattern {
		V[upos=VERB, lemma=lex2.lemma];
		Nominal1[upos=NOUN, lemma=lex1.lemma]; 				% lexicon of quantity measure words
		Nominal2[upos=NOUN|PROPN];							% PROPN too, e.g. "ten Girl Guides"
		verb_nom_rel: V -[obj]-> Nominal1; 					% filter to only those with nsubj relations
		nmod_rel: Nominal1 -[nmod]-> Nominal2;
		nummod_rel: Nominal1 -[nummod]-> Num;
	}
	commands {
		add_node UNIT; UNIT.concept = lex1.quantitytype; 	% add a new node [x]-quantity 
		add_edge UNIT -[quant]-> Num; 
		add_edge UNIT -[unit]-> Nominal1;
		del_edge nmod_rel;
		del_edge nummod_rel;

		add_edge V -[lex2.doer]-> Nominal2;
		V.doer = lex2.doer; 				
		del_edge verb_nom_rel;
	}
}

% K-to-investigate: whether EUD case tagging (either adding the preposition/case to the parent nmod, obl, acl and advcl relation helps)
% The obl relationship does not have a subtag, it captures a temporal modification. The dependent of the obl relation has an outgoing 
% case dependency relation towards a temporal preposition word.  
rule obl_nosubtag_temporal{
	pattern {
		obl_rel: GOV -[obl]-> Nominal;
		Nominal -[case]-> Preposition;
		Preposition[lemma=lex.temporal];
	}
	commands {
		del_edge obl_rel;
		add_edge GOV -[time]-> Nominal;
	}
}

#BEGIN lex
temporal	
%--------------
% list of time prepositions in The Preposition Project, based on set of senses in Quirk et al 1985, and drawn from 
% sentences in FrameNet http://www.clres.com/db/classes/ClassTemporal.php
about
across
before
to
#END


% K-to-investigate: whether EUD case tagging (either adding the preposition/case to the parent nmod, obl, acl and advcl relation helps)
%% The obl relationship does not have a subtag, it captures a locational modification. The dependent of the obl relation has an outgoing 
%% case dependency relation towards a locational preposition word.  
rule obl_nosubtag_locational{
	pattern {
		obl_rel: GOV -[obl]-> Nominal;
		Nominal -[case]-> Preposition;
		Preposition[lemma=lex.locational];
	}
	commands {
		del_edge obl_rel;
		add_edge GOV-[location]-> Nominal;
	}
}
#BEGIN lex
locational	
%--------------
% list of spatial prepositions in The Preposition Project, based on set of senses in Quirk et al 1985, and drawn from 
% sentences in FrameNet http://www.clres.com/db/classes/ClassSpatial.php
across
before
to
#END

% K-to-investigate: more complex structures/rewrites involving obl:npmod. For instance, "The plane crashed 50 miles east of Moscow" 
% in the AMR Guidelines v1.25. 
% The obl relation has an nmod subtag. Appears obsolete/rare in English UD. https://github.com/UniversalDependencies/docs/issues/478 
%rule obl_npmod{
%	pattern {
%		obl_rel: GOV -[obl:npmod]-> DEP;
%	}
%	commands {
%		del_edge obl_rel;
%		add_edge GOV -[quant]-> DEP;
%	}
%}

%% K-to-investigate: distinguishing features of adjuncts vs obliques in English sentences 
%% The obl relationship does not have a subtag, it captures an oblique i.e. an argument of a predicate that is encoded with a 
%% preposition (i.e. dative alternation). See http://aclweb.org/anthology/W17-6532 
%rule obl_nosubtag_obliquearg{
%	pattern {
%		V[upos=VERB];
%		obl_rel: GOV -[obl]-> Nominal;
%	}
%	commands {
%		del_edge obl_rel;
%		add_edge GOV -[mod]-> Nominal;
%	}
%}

% there is an advcl tag. it relates closely with AMR's :manner non-core role. 
% advcl relations in UD can denote "temporal, consequence, conditional clause, purpose clause" as per UDv2.0.
rule advcl_manner{
	pattern{
		advcl_rel: GOV -[advcl]-> DEP;
	}
	commands{
		add_edge GOV -[manner]-> DEP; 
		del_edge advcl_rel;
	}
}

% Rewriting just to deal with exceptions for now

rule obl_npmod_to_obl{
	pattern{
		obl_npmod_rel: GOV -[obl:npmod|obl:tmod]-> DEP;
	}
	commands {
		del_edge obl_npmod_rel;
		add_edge GOV -[obl]-> DEP;
	}
}

rule acl_relcl_to_acl{
	pattern{
		acl_relcl_rel: GOV -[acl:relcl]-> DEP;
	}
	commands {
		del_edge acl_relcl_rel;
		add_edge GOV -[acl]-> DEP;
	}
}

rule nsubj_pass_to_nsubj{
	pattern{
		nsubj_pass_rel: GOV -[nsubj:pass]-> DEP;
	}
	commands {
		del_edge nsubj_pass_rel;
		add_edge GOV -[nsubj]-> DEP;
	}
}

rule compound_part_to_compound{
	pattern{
		nsubj_pass_rel: GOV -[compound:prt]-> DEP;
	}
	commands {
		del_edge nsubj_pass_rel;
		add_edge GOV -[compound]-> DEP;
	}
}

rule det_predet_to_det{
	pattern{
		nsubj_pass_rel: GOV -[det:predet]-> DEP;
	}
	commands {
		del_edge nsubj_pass_rel;
		add_edge GOV -[det]-> DEP;
	}
}

rule cc_preconj_to_cc{
	pattern{
		nsubj_pass_rel: GOV -[cc:preconj]-> DEP;
	}
	commands {
		del_edge nsubj_pass_rel;
		add_edge GOV -[cc]-> DEP;
	}
}

rule aux_pass_to_aux{
	pattern{
		nsubj_pass_rel: GOV -[aux:pass]-> DEP;
	}
	commands {
		del_edge nsubj_pass_rel;
		add_edge GOV -[aux]-> DEP;
	}
}

% End of rewriting for exceptions

